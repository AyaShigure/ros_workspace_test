// Generated by gencpp from file test_package/Hz.msg
// DO NOT EDIT!


#ifndef TEST_PACKAGE_MESSAGE_HZ_H
#define TEST_PACKAGE_MESSAGE_HZ_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace test_package
{
template <class ContainerAllocator>
struct Hz_
{
  typedef Hz_<ContainerAllocator> Type;

  Hz_()
    : Hz(0)
    , distance(0.0)  {
    }
  Hz_(const ContainerAllocator& _alloc)
    : Hz(0)
    , distance(0.0)  {
  (void)_alloc;
    }



   typedef int16_t _Hz_type;
  _Hz_type Hz;

   typedef float _distance_type;
  _distance_type distance;





  typedef boost::shared_ptr< ::test_package::Hz_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::test_package::Hz_<ContainerAllocator> const> ConstPtr;

}; // struct Hz_

typedef ::test_package::Hz_<std::allocator<void> > Hz;

typedef boost::shared_ptr< ::test_package::Hz > HzPtr;
typedef boost::shared_ptr< ::test_package::Hz const> HzConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::test_package::Hz_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::test_package::Hz_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::test_package::Hz_<ContainerAllocator1> & lhs, const ::test_package::Hz_<ContainerAllocator2> & rhs)
{
  return lhs.Hz == rhs.Hz &&
    lhs.distance == rhs.distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::test_package::Hz_<ContainerAllocator1> & lhs, const ::test_package::Hz_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace test_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::test_package::Hz_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::test_package::Hz_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::test_package::Hz_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::test_package::Hz_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::test_package::Hz_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::test_package::Hz_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::test_package::Hz_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4cb9cdb75a7d736a7cc332f56659b712";
  }

  static const char* value(const ::test_package::Hz_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4cb9cdb75a7d736aULL;
  static const uint64_t static_value2 = 0x7cc332f56659b712ULL;
};

template<class ContainerAllocator>
struct DataType< ::test_package::Hz_<ContainerAllocator> >
{
  static const char* value()
  {
    return "test_package/Hz";
  }

  static const char* value(const ::test_package::Hz_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::test_package::Hz_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 Hz\n"
"float32 distance\n"
;
  }

  static const char* value(const ::test_package::Hz_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::test_package::Hz_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Hz);
      stream.next(m.distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Hz_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::test_package::Hz_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::test_package::Hz_<ContainerAllocator>& v)
  {
    s << indent << "Hz: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Hz);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TEST_PACKAGE_MESSAGE_HZ_H
